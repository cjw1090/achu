# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled3.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from decompress import *
from Chrome_history import history_length, historyFileName,HisVisTime
from Chrome_download import down_length, localFileName,downFileName,startDown, downLastAccess
#from Chrome_cahce import chrome_cache, cache, cache_len
from winreg import *
from os.path import basename
import re, struct
from datetime import datetime, timedelta
import sys
from lnk_achu import lnk_len
from lnk_achu import *
import csv

lnk_Row = 0

class Ui_Dialog(object):
    path = "C:\\Windows\\Prefetch"
    def prefetch(self):
        index = 0
        for path, dirs, files in os.walk(Ui_Dialog.path):
            for file in files:
                if os.path.splitext(file)[1].lower() in ['.pf']:
                    target = path + '//' + file
                    data = decom(target)
                    try:
                        Ui_Dialog.parser(self, index, data, target, file)
                        index += 1
                    except:
                        pass
    def files_count(self):
        return len(os.listdir(Ui_Dialog.path))

    def __init__(self):
        self.net = "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCache"  # 서브레지스트리 목록 지정 ( ShimCache 경로 )
        self.reg = ConnectRegistry(None, HKEY_LOCAL_MACHINE)  # 루트 레지스트리 핸들 객체 얻기
        self.key = OpenKey(self.reg, self.net)  # 레지스트리 핸들 객체 얻기

        self.a, self.b, self.c = EnumValue(self.key, 0)  # 지정한 레지스트리 하위 키값 조회
        self.bin_size = len(self.b)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setEnabled(True)
        Dialog.resize(1140, 870) #전체 창 크기(가로,세로)
        Dialog.setAutoFillBackground(False)

        self.ListTable = QtWidgets.QTableWidget(Dialog)
        self.ListTable.setGeometry(QtCore.QRect(30, 140, 1080, 700)) #데이터 창 크기(왼쪽여백,위쪽여백,가로,세로)
        self.ListTable.setMaximumSize(QtCore.QSize(3000, 16777215))
        self.ListTable.setSizeIncrement(QtCore.QSize(0, 0))
        self.ListTable.setBaseSize(QtCore.QSize(0, 0))

        font = QtGui.QFont()
        font.setFamily("돋움")
        font.setBold(False)
        font.setWeight(50)
        font.setPointSize(9)

        font1 = QtGui.QFont()
        font1.setFamily("Agency FB")
        font1.setPointSize(10)
        font1.setBold(True)
        font1.setWeight(75)

        count = 0
        global lnk_Row
        s = self.shimcacheWrite(count)
        self.ListTable.setFont(font)
        self.ListTable.setMouseTracking(False)
        self.ListTable.setTabletTracking(False)
        self.ListTable.setAcceptDrops(False)
        self.ListTable.setToolTipDuration(-1)
        self.ListTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.ListTable.setAutoScroll(True)
        self.ListTable.setAutoScrollMargin(16)
        self.ListTable.setShowGrid(True)
        #self.ListTable.setRowCount(Ui_Dialog.prefetch(self) + down_length + history_length + cache_len - 1)
        self.ListTable.setRowCount(Ui_Dialog.files_count(self) + down_length + history_length + s + lnk_len - 1)
        self.ListTable.setColumnCount(5)
        self.ListTable.setObjectName("ListTable")


        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignTop)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(0, item)
        self.ListTable.setColumnWidth(0, 200)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(1, item)
        self.ListTable.setColumnWidth(1, 200)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignTop)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(2, item)
        self.ListTable.setColumnWidth(2, 200)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(3, item)
        self.ListTable.setColumnWidth(3, 200)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignTop)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(4, item)
        self.ListTable.setColumnWidth(4, 199)

        self.saveButton = QtWidgets.QPushButton(Dialog)
        self.saveButton.setGeometry(QtCore.QRect(28, 5, 80, 30))#저장 버튼
        self.saveButton.setObjectName("saveButton")

        self.Category = QtWidgets.QComboBox(Dialog)
        self.Category.setGeometry(QtCore.QRect(161, 40, 120, 25))#검색기준2(파일명) 콤보박스
        self.Category.setObjectName("Category")
        self.Category.addItem("")
        self.Category.addItem("")
        self.Category.addItem("")
        self.Category.addItem("")
        self.Category.addItem("")
        self.Category.addItem("")

        self.SettingTime_2 = QtWidgets.QLabel(Dialog)
        self.SettingTime_2.setGeometry(QtCore.QRect(30, 70, 120, 20))#"파일크기 (KB)"
        self.SettingTime_2.setFont(font1)
        self.SettingTime_2.setObjectName("SettingTime_2")

        self.SettingTime2 = QtWidgets.QLabel(Dialog)
        self.SettingTime2.setGeometry(QtCore.QRect(398, 107, 16, 16))#"~"
        self.SettingTime2.setFont(font)
        self.SettingTime2.setObjectName("SettingTime2")

        self.SearchButton = QtWidgets.QPushButton(Dialog)
        self.SearchButton.setGeometry(QtCore.QRect(660, 40, 75, 26))#Search 버튼
        self.SearchButton.setCheckable(True)
        self.SearchButton.setChecked(True)
        self.SearchButton.setObjectName("SearchButton")

        self.FileSize = QtWidgets.QLineEdit(Dialog)
        self.FileSize.setGeometry(QtCore.QRect(160, 70, 230, 25))#파일크기 박스
        self.FileSize.setObjectName("FileSize")

        self.StartTime = QtWidgets.QDateTimeEdit(Dialog)
        self.StartTime.setGeometry(QtCore.QRect(160, 100, 230, 25))#시간설정1 박스
        self.StartTime.setDateTime(QtCore.QDateTime.currentDateTime())
        self.StartTime.setCalendarPopup(True)
        self.StartTime.setObjectName("StartTime")

        self.EndTime = QtWidgets.QDateTimeEdit(Dialog)
        self.EndTime.setGeometry(QtCore.QRect(420, 100, 230, 25))#시간설정2 박스
        self.EndTime.setDateTime(QtCore.QDateTime.currentDateTime())
        self.EndTime.setCalendarPopup(True)
        self.EndTime.setObjectName("EndTime")

        self.Artifacts = QtWidgets.QComboBox(Dialog)
        self.Artifacts.setGeometry(QtCore.QRect(30, 40, 120, 25))#검색기준1(아티팩트) 콤보박스
        self.Artifacts.setObjectName("Artifacts")
        self.Artifacts.addItem("")
        self.Artifacts.addItem("")
        self.Artifacts.addItem("")
        self.Artifacts.addItem("")
        self.Artifacts.addItem("")

        self.SettingTime = QtWidgets.QLabel(Dialog)
        self.SettingTime.setGeometry(QtCore.QRect(30, 100, 120, 20))#"시간 설정"
        self.SettingTime.setFont(font1)
        self.SettingTime.setObjectName("SettingTime")

        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(290, 40, 360, 25))#검색기준3(문자열입력) 박스
        self.lineEdit.setObjectName("lineEdit")

        ui.prefetch()
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        for i in range(0, down_length):
            self.ListTable.setItem(i+Ui_Dialog.files_count(self), 0, QtWidgets.QTableWidgetItem(downFileName[i]))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self), 1, QtWidgets.QTableWidgetItem(startDown[i]))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self), 2, QtWidgets.QTableWidgetItem(downLastAccess[i]))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self), 3, QtWidgets.QTableWidgetItem(""))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self), 4, QtWidgets.QTableWidgetItem("Chrome_download"))

        for i in range(0, history_length):
            self.ListTable.setItem(i+Ui_Dialog.files_count(self) + down_length, 0, QtWidgets.QTableWidgetItem(historyFileName[i]))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self) + down_length, 1, QtWidgets.QTableWidgetItem(HisVisTime[i]))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self) + down_length, 2, QtWidgets.QTableWidgetItem(""))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self) + down_length, 3, QtWidgets.QTableWidgetItem(""))
            self.ListTable.setItem(i+Ui_Dialog.files_count(self) + down_length, 4, QtWidgets.QTableWidgetItem("Chrome_history"))
            
        lnk_Row = Ui_Dialog.files_count(self) + down_length + history_length+ s

    def parser(self, index, buf, target, file):
        process_name = remove_null(buf[16:74]) #실행파일 이름
        file_name = file  # 파일 이름
        self.ListTable.setItem(index, 0, QtWidgets.QTableWidgetItem(file_name))
        file_size = LittleEndianToInt(buf[12:15]) #파일 크기
        ctime = datetime.fromtimestamp(os.path.getctime(target)) #생성시각
        self.ListTable.setItem(index, 1, QtWidgets.QTableWidgetItem(str(ctime)))
        mtime = datetime.fromtimestamp(os.path.getmtime(target)) #수정시각
        self.ListTable.setItem(index, 2, QtWidgets.QTableWidgetItem(str(mtime)))
        last_runtime = time_change(buf[128:136]) #마지막 실행시각
        self.ListTable.setItem(index, 3, QtWidgets.QTableWidgetItem(str(last_runtime)))
        self.ListTable.setItem(index, 4, QtWidgets.QTableWidgetItem("Prefetch"))
        run_count = LittleEndianToInt(buf[200:203]) #실행 횟수
        # Timehistory(run_count, buf) #실행이력(최대 8개)
        #Dll_List(buf)
        #process_path = Full_Path(volume(), Dll_List(buf), process_name) #실행파일 경로


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Achu_test"))
        self.ListTable.setHorizontalHeaderLabels(["File Name", "Create Time", "Modified Time", "Run Time", "Artifact"])
        self.saveButton.setText(_translate("Dialog", "저장"))
        self.Category.setItemText(0, _translate("Dialog", "파일명"))
        self.Category.setItemText(1, _translate("Dialog", "생성 시간"))
        self.Category.setItemText(2, _translate("Dialog", "수정 시간"))
        self.Category.setItemText(3, _translate("Dialog", "실행 시간"))
        self.Category.setItemText(4, _translate("Dialog", "URL"))
        self.Category.setItemText(5, _translate("Dialog", "다운 로드"))
        self.SettingTime_2.setText(_translate("Dialog", "파일 크기(KB)"))
        self.SettingTime2.setText(_translate("Dialog", "~"))
        self.SearchButton.setText(_translate("Dialog", "Search"))
        self.Artifacts.setItemText(0, _translate("Dialog", "Artifacts"))
        self.Artifacts.setItemText(1, _translate("Dialog", "Prefetch"))
        self.Artifacts.setItemText(2, _translate("Dialog", "WebBrowser"))
        self.Artifacts.setItemText(3, _translate("Dialog", "LNK"))
        self.Artifacts.setItemText(4, _translate("Dialog", "ShimCache"))
        self.SettingTime.setText(_translate("Dialog", "시간 설정"))
        #self.FilePath_Label.setText(_translate("Dialog", "경로 설정"))

        self.cachedatas = self.shimcacheParser()

        count = 0
        self.shimcacheWrite(count)

    def shimcacheWrite(self, count):
        self.cachedatas = self.shimcacheParser()
        shimRow = down_length + history_length + Ui_Dialog.files_count(self)
        for cachedata in self.cachedatas:
            self.ListTable.setItem(shimRow, 0, QtWidgets.QTableWidgetItem(cachedata[0]))
            self.ListTable.setItem(shimRow, 1, QtWidgets.QTableWidgetItem(cachedata[1]))
            self.ListTable.setItem(shimRow, 2, QtWidgets.QTableWidgetItem(cachedata[2]))
            self.ListTable.setItem(shimRow, 3, QtWidgets.QTableWidgetItem(""))
            self.ListTable.setItem(shimRow, 4, QtWidgets.QTableWidgetItem("ShimCache"))
            count = count + 1
            shimRow += 1
        return count

    def shimcacheParser(self):
        result = []
        result_tmp = []
        self.binary = self.b
        # print(bin_size)
        self.n = 0

        # 첫번째 0x34 =52값이 header사이즈로 보이니까 첫번째 값을 가져온다
        self.header_size = self.binary[0]
        # 헤더 크기 이후의 값을 바이너리로 다시 담는다
        while self.n < self.bin_size:
            self.bin = self.binary[self.n + self.header_size:]
            if not self.bin:
                break
            signature = self.bin[0:4].decode()
            unknown = self.bin[4:8].hex()
            entry_size = struct.unpack('L', self.bin[8:12])[0]
            path_len = struct.unpack('h', self.bin[12:14])[0]
            path_str = self.bin[14:path_len + 14].decode('UTF-16')
            filename = basename(path_str)

            time = self.bin[path_len + 14:path_len + 14 + 8].hex()
            times = time[14:16] + time[12:14] + time[10:12] + time[8:10] + time[6:8] + time[4:6] + time[2:4] + time[0:2]
            data_size = struct.unpack('i', self.bin[path_len + 22:path_len + 26])[0]
            data = self.bin[path_len + 14 + 12:path_len + 14 + 12 + data_size]
            self.n += path_len + 12 + 14 + data_size
            us = int(times, 16) / 10.

            result_time = datetime(1601, 1, 1) + timedelta(microseconds=us)
            s_time = str(result_time)
            if "1601-01-01 00:00:00" == s_time:
                s_time = "Uknwon Time"
                continue
            else:
                s_time
            result_tmp = [filename, path_str, s_time]
            result.append(result_tmp)
            # result_tmp=[]
        return result

    def LinkFile_Function(self):
        global lnk_Row
        f = open('write.csv', 'r', -1, 'utf-8')
        rdr = csv.reader(f)
        for line in rdr:
            self.ListTable.setItem(lnk_Row, 0, QtWidgets.QTableWidgetItem(line[1]))
            self.ListTable.setItem(lnk_Row, 1, QtWidgets.QTableWidgetItem(line[3]))
            self.ListTable.setItem(lnk_Row, 2, QtWidgets.QTableWidgetItem(line[4]))
            self.ListTable.setItem(lnk_Row, 3, QtWidgets.QTableWidgetItem(line[5]))
            self.ListTable.setItem(lnk_Row, 4, QtWidgets.QTableWidgetItem("LinkFile"))
            lnk_Row += 1
        f.close()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    ui.LinkFile_Function()
    Dialog.show()
    sys.exit(app.exec_())
