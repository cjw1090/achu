# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtGui import QIcon, QColor
from PyQt5.QtWidgets import QAction, qApp, QMenuBar
import Pre_Details
import Link_Details
import Shim_Details
import Chrome_Details
import Search_Details
import Delete_Files
import Anti_Details
import Malware_Detail, Malware_function
import Recently_Used, Recently_function
import Continuous_Detail, Continuous_function
import random
from tkinter import Tk
from tkinter import messagebox as msg
from D_check import check2, realDeleted
from decompress import *
import pandas as pd

from Chrome_history import history_length, historyFileName, HisVisTime, historyLastAccess
from Chrome_download import down_length, localFileName, downFileName, startDown, downLastAccess, localFileTime, D_Addr, D_Time
from Chrome_cahce import cache, cache_len, url, file_path, last_modified_time, access_time, file_name, file_size
from winreg import *
from os.path import basename
import struct
from lnk_achu import *
import csv

lnk_Row = 0
lnk_detail_count = 0
tapname_list = []
sea = pre = chr = shi = lin = anx = alx = cox = rex = dex = 0

# Anti-Forensic Global Variable
process_name1 = process_path_3 = ctime_1 = mtime_1 = last_runtime_1 = run_count_1 = timehistory = existence = ""
count = 0
# Anti-Forensic Global Variable End

class Ui_Dialog(object):
    path = "C:\\Windows\\Prefetch"

    def prefetch(self, objectname):
        index = 0
        for path, dirs, files in os.walk(Ui_Dialog.path):
            for file in files:
                if os.path.splitext(file)[1].lower() in ['.pf']:
                    target = path + '\\' + file
                    data = decom(target)
                    try:
                        Ui_Dialog.parser(self, index, data, target, file, objectname)
                        index += 1
                    except:
                        pass

    def prefetch_Detail(self, objectname, filename):
        target = Ui_Dialog.path + '\\' + filename
        data = decom(target)
        try:
            index = 0
            Ui_Dialog.parser(self, index, data, target, filename, objectname)
        except:
            pass

    def files_count(self):
        file_index = 0
        for path, dirs, files in os.walk(Ui_Dialog.path):
            for file in files:
                if os.path.splitext(file)[1].lower() in ['.pf']:
                    file_index += 1
        return file_index

    def __init__(self):
        self.net = "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCache"  # 서브레지스트리 목록 지정 ( AppCompactCache 경로 )
        self.reg = ConnectRegistry(None, HKEY_LOCAL_MACHINE)  # 루트 레지스트리 핸들 객체 얻기
        self.key = OpenKey(self.reg, self.net)  # 레지스트리 핸들 객체 얻기

        self.a, self.b, self.c = EnumValue(self.key, 0)  # 지정한 레지스트리 하위 키값 조회
        self.bin_size = len(self.b)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(1100,673)

        font = QtGui.QFont()
        font.setFamily("돋움")
        font.setBold(False)
        font.setWeight(50)
        font.setPointSize(9)

        font1 = QtGui.QFont()
        font1.setFamily("Agency FB")
        font1.setPointSize(10)
        font1.setBold(True)
        font1.setWeight(75)

        self.gridLayout_6 = QtWidgets.QGridLayout(Dialog)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")

        # SearchButton Start
        self.SearchButton = QtWidgets.QPushButton(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SearchButton.sizePolicy().hasHeightForWidth())
        self.SearchButton.setSizePolicy(sizePolicy)
        self.SearchButton.setObjectName("SearchButton")
        self.SearchButton.setCheckable(True)
        self.SearchButton.setChecked(True)
        self.gridLayout_2.addWidget(self.SearchButton, 0, 2, 1, 1)
        self.SearchButton.clicked.connect(
            lambda: self.SearchButton_Event(self.Artifacts.currentText(), self.SearchData.text(),
                                            self.Category.currentText(), self.StartTime.text(), self.EndTime.text()))
        # SearchButton End

        # SearchData Start
        self.SearchData = QtWidgets.QLineEdit(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SearchData.sizePolicy().hasHeightForWidth())
        self.SearchData.setSizePolicy(sizePolicy)
        self.SearchData.setObjectName("SearchData")
        self.gridLayout_2.addWidget(self.SearchData, 0, 1, 1, 1)
        # SearchData End

        # Artifacts Dropdown Start
        self.Artifacts = QtWidgets.QComboBox(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Artifacts.sizePolicy().hasHeightForWidth())
        self.Artifacts.setSizePolicy(sizePolicy)
        self.Artifacts.setObjectName("Artifacts")
        self.Artifacts.addItem("")  # Artifacts
        self.Artifacts.addItem("")  # Prefetech
        self.Artifacts.addItem("")  # AppCompatCache
        self.Artifacts.addItem("")  # LinkFile
        self.Artifacts.addItem("")  # Chrome_Cache
        self.Artifacts.addItem("")  # Chrome_History
        self.Artifacts.addItem("")  # Chrome_download
        self.Artifacts.addItem("")  # Time_Search
        self.gridLayout_2.addWidget(self.Artifacts, 0, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_2, 1, 1, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.Artifacts.activated.connect(lambda: self.MousePress_Event(self.Artifacts.currentIndex()))
        # Artifacts Dropdown End

        # StartTime Start
        self.StartTime = QtWidgets.QDateTimeEdit(Dialog)
        self.StartTime.setDateTime(QtCore.QDateTime.currentDateTime())
        self.StartTime.setCalendarPopup(True)
        self.StartTime.setObjectName("StartTime")
        self.gridLayout_3.addWidget(self.StartTime, 0, 1, 1, 1)
        self.StartTime.setDisplayFormat("yyyy-MM-dd hh:mm:ss")
        # StartTime End

        # SettingTime Start
        self.SettingTime2 = QtWidgets.QLabel(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SettingTime2.sizePolicy().hasHeightForWidth())
        self.SettingTime2.setSizePolicy(sizePolicy)
        self.SettingTime2.setFont(font)
        self.SettingTime2.setObjectName("SettingTime2")
        self.gridLayout_3.addWidget(self.SettingTime2, 0, 2, 1, 1)
        # SettingTime End

        # Category Start
        self.Category = QtWidgets.QComboBox(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Category.sizePolicy().hasHeightForWidth())
        self.Category.setSizePolicy(sizePolicy)
        self.Category.setObjectName("Category")
        self.Category.addItem("")
        self.Category.addItem("")
        self.Category.addItem("")
        self.gridLayout_3.addWidget(self.Category, 0, 0, 1, 1)
        self.Category.setEnabled(False)
        # Category End

        # EndTime Start
        self.EndTime = QtWidgets.QDateTimeEdit(Dialog)
        self.EndTime.setDateTime(QtCore.QDateTime.currentDateTime())
        self.EndTime.setCalendarPopup(True)
        self.EndTime.setObjectName("EndTime")
        self.gridLayout_3.addWidget(self.EndTime, 0, 3, 1, 1)
        self.EndTime.setDisplayFormat("yyyy-MM-dd hh:mm:ss")
        # EndTime End

        # TabWidget Start
        self.gridLayout_6.addLayout(self.gridLayout_3, 3, 1, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(True)
        self.tabWidget.tabCloseRequested.connect(self.close_handler)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.tabWidget.addTab(self.tab, "Main")
        # TabWidget End

        # ListTable Start
        self.ListTable = QtWidgets.QTableWidget(self.tab)
        self.ListTable.setObjectName("ListTable")
        self.gridLayout_5.addWidget(self.ListTable, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout, 4, 1, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem, 1, 1, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_4, 0, 1, 1, 1)

        self.ListTable.setFont(font)
        self.ListTable.setMouseTracking(False)
        self.ListTable.setTabletTracking(False)
        self.ListTable.setAcceptDrops(False)
        self.ListTable.setToolTipDuration(-1)
        self.ListTable.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.ListTable.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.ListTable.setAutoScroll(True)
        self.ListTable.setAutoScrollMargin(16)

        self.ListTable.setShowGrid(True)
        self.ListTable.setSortingEnabled(True)
        self.ListTable.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)  # Options : Not Edit
        self.ListTable.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)  # Select Rows
        count = 0
        global lnk_Row
        global lnk_detail_count
        s = self.shimcacheWrite(count, "ListTable", "")
        self.ListTable.setRowCount(Ui_Dialog.files_count(self) + down_length + history_length + s + cache_len + lnk_len - 1)
        lnk_Row = Ui_Dialog.files_count(self) + down_length + history_length + cache_len + s
        lnk_detail_count = Ui_Dialog.files_count(self) + down_length + history_length + cache_len + s
        self.ListTable.setColumnCount(6)
        self.ListTable.doubleClicked.connect(lambda: self.DoubleClick_Event(self.ListTable.objectName()))
        # ListTable End

        # MenuBar
        exitAction = QAction(QIcon('exit.png'), 'Exit', parent=Dialog)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit application')
        exitAction.triggered.connect(qApp.quit)

        SaveAction = QAction(QIcon('save.png'), 'Save', parent=Dialog)
        SaveAction.setShortcut('Ctrl+S')
        SaveAction.setStatusTip('Save')
        SaveAction.triggered.connect(self.Save_Data)

        Anti_Action = QAction(QIcon('Anti.png'), 'Anti-Forensic Tool Execution Trace', parent=Dialog)
        Anti_Action.setStatusTip('Anti-Forensic Tool Execution Trace')
        Anti_Action.triggered.connect(self.Anti)

        Mal_Action = QAction(QIcon('mal.png'), 'Malicious File Execution Trace', parent=Dialog)
        Mal_Action.setStatusTip('Malicious File Execution Trace')
        Mal_Action.triggered.connect(self.Mala)

        Freq_Action = QAction(QIcon('freq.png'), 'Freqently Used File Trace', parent=Dialog)
        Freq_Action.setStatusTip('Freqently Used File Trace')
        Freq_Action.triggered.connect(self.Frequently)

        Cont_Action = QAction(QIcon('cont.png'), 'Continuous File Execution Trace', parent=Dialog)
        Cont_Action.setStatusTip('Continuous File Execution Trace')
        Cont_Action.triggered.connect(self.Conti)

        Dele_Action = QAction(QIcon('dele.png'), 'Currently Deleted Executable Trace', parent=Dialog)
        Dele_Action.setStatusTip('Currently Deleted Executable Trace')
        Dele_Action.triggered.connect(self.Defile)

        self.menubar = QMenuBar(Dialog)
        self.menubar.setStyleSheet("background-color: #A1A3A6")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menubar.sizePolicy().hasHeightForWidth())
        self.menubar.setSizePolicy(sizePolicy)
        self.gridLayout_4.addWidget(self.menubar, 1, 0, 1, 1)
        self.menubar.setNativeMenuBar(False)
        self.filemenu = self.menubar.addMenu('&File')
        self.filemenu.addAction(exitAction)
        self.filemenu.addAction(SaveAction)
        self.toolmenu = self.menubar.addMenu('&Tool')
        self.toolmenu.addAction(Anti_Action)
        self.toolmenu.addAction(Freq_Action)
        self.toolmenu.addAction(Cont_Action)
        self.toolmenu.addAction(Dele_Action)
        self.toolmenu.addAction(Mal_Action)
        # MenuBar End

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignTop)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(0, item)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(1, item)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignTop)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(2, item)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(3, item)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignTop)
        item.setFont(font)
        self.ListTable.setHorizontalHeaderItem(4, item)
        self.ListTable.setColumnHidden(5, True)
        tapname_list.append(self.ListTable.objectName())

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.prefetch(self.ListTable.objectName())
        self.chrome(self.ListTable.objectName(), "", "")
        self.shimcacheWrite(count, self.ListTable.objectName(), "")
        self.LinkFile_Function(self.ListTable.objectName(), "")

        return self.ListTable.rowCount()

    def chrome(self, objectname, filename, selitem):
        if (objectname == "ListTable"):
            for i in range(0, down_length):
                self.ListTable.setItem(i + Ui_Dialog.files_count(self), 0, QtWidgets.QTableWidgetItem(downFileName[i]))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self), 1, QtWidgets.QTableWidgetItem(startDown[i]))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self), 2,
                                       QtWidgets.QTableWidgetItem(downLastAccess[i]))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self), 3, QtWidgets.QTableWidgetItem(""))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self), 4,
                                       QtWidgets.QTableWidgetItem("Chrome_download"))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self), 5, QtWidgets.QTableWidgetItem(""))

            for i in range(0, history_length):
                self.ListTable.setItem(i + Ui_Dialog.files_count(self) + down_length, 0,
                                       QtWidgets.QTableWidgetItem(historyFileName[i]))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self) + down_length, 1,
                                       QtWidgets.QTableWidgetItem(HisVisTime[i]))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self) + down_length, 2, QtWidgets.QTableWidgetItem(""))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self) + down_length, 3,
                                       QtWidgets.QTableWidgetItem(historyLastAccess[i]))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self) + down_length, 4,
                                       QtWidgets.QTableWidgetItem("Chrome_history"))
                self.ListTable.setItem(i + Ui_Dialog.files_count(self) + down_length, 5, QtWidgets.QTableWidgetItem(""))

            row = down_length + history_length + Ui_Dialog.files_count(self)
            for i in cache:
                self.ListTable.setItem(row, 0, QtWidgets.QTableWidgetItem(i['file_path']))
                self.ListTable.setItem(row, 1, QtWidgets.QTableWidgetItem(i['creation_time']))
                if i['last_modified_time'] == '1601-01-01 00:00:00':
                    i['last_modified_time'] = ''
                self.ListTable.setItem(row, 2, QtWidgets.QTableWidgetItem(i['last_modified_time']))
                self.ListTable.setItem(row, 3, QtWidgets.QTableWidgetItem(i['access_time']))
                self.ListTable.setItem(row, 4, QtWidgets.QTableWidgetItem('Chrome_cache'))
                self.ListTable.setItem(row, 5, QtWidgets.QTableWidgetItem(i['url']))
                row += 1
        else:
            self.Chrome_Detail.setItem(0, 0, QtWidgets.QTableWidgetItem("Chrome"))
            if "Chrome_download" in selitem:
                if filename in localFileName:
                    self.Chrome_Detail.setItem(1, 0,
                                               QtWidgets.QTableWidgetItem(localFileName[localFileName.index(filename)]))
                    self.Chrome_Detail.setItem(2, 0, QtWidgets.QTableWidgetItem(str(localFileTime[localFileName.index(filename)])))
                    self.Chrome_Detail.setItem(3, 0,
                                               QtWidgets.QTableWidgetItem(downFileName[localFileName.index(filename)]))
                    self.Chrome_Detail.setItem(4, 0,
                                               QtWidgets.QTableWidgetItem(startDown[localFileName.index(filename)]))
                    self.Chrome_Detail.setItem(5, 0, QtWidgets.QTableWidgetItem(D_Addr[localFileName.index(filename)]))
                    self.Chrome_Detail.setItem(6, 0, QtWidgets.QTableWidgetItem(D_Time[localFileName.index(filename)]))
                    for i in range(7, 13):
                        self.Chrome_Detail.setItem(i, 0, QtWidgets.QTableWidgetItem("-"))
            elif "Chrome_history" in selitem:
                if filename in historyFileName:
                    for i in range(1, 5):
                        self.Chrome_Detail.setItem(i, 0, QtWidgets.QTableWidgetItem("-"))
                    self.Chrome_Detail.setItem(5, 0, QtWidgets.QTableWidgetItem(
                        historyFileName[historyFileName.index(filename)]))
                    self.Chrome_Detail.setItem(6, 0,
                                               QtWidgets.QTableWidgetItem(HisVisTime[historyFileName.index(filename)]))
                    for i in range(7, 13):
                        self.Chrome_Detail.setItem(i, 0, QtWidgets.QTableWidgetItem("-"))
            elif "Chrome_cache" in selitem:
                for i in range(1, 7):
                    self.Chrome_Detail.setItem(i, 0, QtWidgets.QTableWidgetItem("-"))
                self.Chrome_Detail.setItem(7, 0, QtWidgets.QTableWidgetItem(file_name[url.index(filename)]))
                self.Chrome_Detail.setItem(8, 0, QtWidgets.QTableWidgetItem(file_path[url.index(filename)]))
                self.Chrome_Detail.setItem(9, 0, QtWidgets.QTableWidgetItem(access_time[url.index(filename)]))
                self.Chrome_Detail.setItem(10, 0, QtWidgets.QTableWidgetItem(file_size[url.index(filename)]))
                self.Chrome_Detail.setItem(11, 0, QtWidgets.QTableWidgetItem(last_modified_time[url.index(filename)]))
                self.Chrome_Detail.setItem(12, 0, QtWidgets.QTableWidgetItem(url[url.index(filename)]))
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Chrome_Detail.objectName()))

    def parser(self, index, buf, target, file, objectname):
        process_name = remove_null(buf[16:74])  # 실행파일 이름
        file_name = file  # 파일 이름
        file_size = format(LittleEndianToInt(buf[12:15]) / 1024, "0.2f")  # 파일 크기
        ctime = datetime.fromtimestamp(os.path.getctime(target))  # 생성시각
        s_ctime = str(ctime).split(".")[0]
        mtime = datetime.fromtimestamp(os.path.getmtime(target))  # 수정시각
        s_mtime = str(mtime).split(".")[0]
        last_runtime = str(time_change(buf[128:136])).split(".")[0]  # 마지막 실행시각
        s_last_runtime = str(last_runtime).split(".")[0]
        run_count = LittleEndianToInt(buf[200:203])  # 실행 횟수
        pre_version = LittleEndianToInt(buf[0:4])  # 버전
        if (objectname == "ListTable"):
            self.ListTable.setItem(index, 0, QtWidgets.QTableWidgetItem(file_name))
            self.ListTable.setItem(index, 1, QtWidgets.QTableWidgetItem(s_ctime))
            self.ListTable.setItem(index, 2, QtWidgets.QTableWidgetItem(s_mtime))
            self.ListTable.setItem(index, 3, QtWidgets.QTableWidgetItem(s_last_runtime))
            self.ListTable.setItem(index, 4, QtWidgets.QTableWidgetItem("Prefetch"))
            self.ListTable.setItem(index, 5, QtWidgets.QTableWidgetItem(""))
        elif (objectname == "Dll_list_Detail"):
            #print(objectname)
            D_list_count = 0
            #print(D_list_count)
            time_data = Timehistory(run_count, buf)
            self.Pre_Detail.setItem(0, index, QtWidgets.QTableWidgetItem(process_name))  # 파일 이름
            self.Pre_Detail.setItem(1, index, QtWidgets.QTableWidgetItem(s_ctime))
            self.Pre_Detail.setItem(2, index, QtWidgets.QTableWidgetItem(s_mtime))
            self.Pre_Detail.setItem(3, index, QtWidgets.QTableWidgetItem(str(file_size) + "KB"))  # 파일 크기
            self.Pre_Detail.setItem(4, index, QtWidgets.QTableWidgetItem(file_name))  # 실행 파일 이름
            self.Pre_Detail.setItem(6, index, QtWidgets.QTableWidgetItem(str(run_count)))  # 실행 횟수

            time_data_count = len(time_data)
            for i in range(0, 7):
                if (time_data_count <= 0):
                    self.Pre_Detail.setItem(i + 7, index, QtWidgets.QTableWidgetItem("-"))
                else:
                    self.Pre_Detail.setItem(i + 7, index,
                                            QtWidgets.QTableWidgetItem(str(time_data[time_data_count - 1]).split(".")[0]))
                time_data_count -= 1
            self.Pre_Detail.setItem(14, index, QtWidgets.QTableWidgetItem(str(last_runtime)))
            self.Pre_Detail.setItem(15, index, QtWidgets.QTableWidgetItem(str(version(pre_version))))
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Pre_Detail.objectName()))
            # Dll_List(buf)
            ###########프리패치 dll ##################
            Dll_List(buf)
            pre_DLL()
            d_pro = ""
            self.Dll_list_Detail.setRowCount(len(D_list))
            #print(D_list)
            for i in D_list:
                d_pro = i.split("\\")[-1]
                #print(d_pro)
                self.Dll_list_Detail.setItem(D_list_count, 0, QtWidgets.QTableWidgetItem(d_pro))
                self.Dll_list_Detail.setItem(D_list_count, 1, QtWidgets.QTableWidgetItem(i))
                #print(i)
                #print("ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ")
                D_list_count += 1
            process_path = Full_Path(volume(), Dll_List(buf), process_name)  # 실행파일 경로
            self.Pre_Detail.setItem(5, index, QtWidgets.QTableWidgetItem(process_path))
            ###########프리패치 dll ##################

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Achu Execution-related Artifact Extraction Analysis Tool"))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("image/ACHU_logo6.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setWindowFlag(QtCore.Qt.WindowMinimizeButtonHint, True)
        self.ListTable.setHorizontalHeaderLabels(
            ["File Name", "Create Time", "Modified Time", "Run Time", "Artifact", ""])
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "Main"))
        self.Category.setItemText(0, _translate("Dialog", "Create_Time"))
        self.Category.setItemText(1, _translate("Dialog", "Modify_Time"))
        self.Category.setItemText(2, _translate("Dialog", "Execute_Time"))
        self.SettingTime2.setText(_translate("Dialog", "~"))
        self.SearchButton.setText(_translate("Dialog", "Search"))
        self.Artifacts.setItemText(0, _translate("Dialog", "Artifacts"))
        self.Artifacts.setItemText(1, _translate("Dialog", "Prefetch"))
        self.Artifacts.setItemText(2, _translate("Dialog", "Chrome_cache"))
        self.Artifacts.setItemText(3, _translate("Dialog", "Chrome_history"))
        self.Artifacts.setItemText(4, _translate("Dialog", "Chrome_download"))
        self.Artifacts.setItemText(5, _translate("Dialog", "LinkFile"))
        self.Artifacts.setItemText(6, _translate("Dialog", "AppCompatCache"))
        self.Artifacts.setItemText(7, _translate("Dialog", "Time_Search"))
        self.StartTime.setEnabled(False)
        self.EndTime.setEnabled(False)
        header = self.ListTable.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        for i in range(1, self.ListTable.columnCount() - 1):
            header.setSectionResizeMode(i, QtWidgets.QHeaderView.ResizeToContents)
        #count = 0

    def shimcacheWrite(self, count, objectName, filename):
        self.cachedatas = self.shimcacheParser(objectName)
        shimRow = down_length + history_length + Ui_Dialog.files_count(self) + cache_len
        if objectName == "ListTable":
            for cachedata in self.cachedatas:
                self.ListTable.setItem(shimRow, 0, QtWidgets.QTableWidgetItem(cachedata[0]))
                self.ListTable.setItem(shimRow, 1, QtWidgets.QTableWidgetItem(""))
                self.ListTable.setItem(shimRow, 2, QtWidgets.QTableWidgetItem(cachedata[2]))
                self.ListTable.setItem(shimRow, 3, QtWidgets.QTableWidgetItem(""))
                self.ListTable.setItem(shimRow, 4, QtWidgets.QTableWidgetItem("AppCompatCache"))
                self.ListTable.setItem(shimRow, 5, QtWidgets.QTableWidgetItem(cachedata[1]))
                count = count + 1
                shimRow += 1
        else:
            for cachedata in self.cachedatas:
                if filename in cachedata:
                    self.Shim_Detail.setItem(0, count, QtWidgets.QTableWidgetItem(cachedata[0]))
                    self.Shim_Detail.setItem(1, count, QtWidgets.QTableWidgetItem(cachedata[1]))
                    self.Shim_Detail.setItem(2, count, QtWidgets.QTableWidgetItem(cachedata[2]))
                    self.tabWidget.setCurrentIndex(tapname_list.index(self.Shim_Detail.objectName()))
        return count

    def shimcacheParser(self, objectName):
        result = []
        result_tmp = []
        self.binary = self.b
        self.n = 0

        self.header_size = self.binary[0]
        while self.n < self.bin_size:
            self.bin = self.binary[self.n + self.header_size:]
            if not self.bin:
                break
            signature = self.bin[0:4].decode()
            unknown = self.bin[4:8].hex()
            entry_size = struct.unpack('L', self.bin[8:12])[0]
            path_len = struct.unpack('h', self.bin[12:14])[0]
            path_str = self.bin[14:path_len + 14].decode('UTF-16')
            filename = basename(path_str)

            time = self.bin[path_len + 14:path_len + 14 + 8].hex()
            times = time[14:16] + time[12:14] + time[10:12] + time[8:10] + time[6:8] + time[4:6] + time[2:4] + time[0:2]
            data_size = struct.unpack('i', self.bin[path_len + 22:path_len + 26])[0]
            data = self.bin[path_len + 14 + 12:path_len + 14 + 12 + data_size]
            self.n += path_len + 12 + 14 + data_size
            us = int(times, 16) / 10.

            result_time = datetime(1601, 1, 1) + timedelta(microseconds=us)
            s_time = str(result_time).split(".")[0]
            if "1601-01-01 00:00:00" == s_time:
                continue
            else:
                s_time
            result_tmp = [filename, path_str, s_time]
            result.append(result_tmp)
        return result

    def LinkFile_Function(self, objectname, filename):
        global lnk_Row
        global lnk_detail_count

        f = open('write.csv', 'r', -1, 'utf-8')
        rdr = csv.reader(f)

        if objectname == "ListTable":
            for line in rdr:
                self.ListTable.setItem(lnk_Row, 0, QtWidgets.QTableWidgetItem(line[1]))
                self.ListTable.setItem(lnk_Row, 1, QtWidgets.QTableWidgetItem(line[3]))
                self.ListTable.setItem(lnk_Row, 2, QtWidgets.QTableWidgetItem(line[4]))
                self.ListTable.setItem(lnk_Row, 3, QtWidgets.QTableWidgetItem(line[5]))
                self.ListTable.setItem(lnk_Row, 4, QtWidgets.QTableWidgetItem("LinkFile"))
                self.ListTable.setItem(lnk_Row, 5, QtWidgets.QTableWidgetItem(line[17]))
                lnk_Row += 1
        else:
            for i in rdr:
                if filename in i[17]:
                    self.Link_Detail.setItem(0, 0, QtWidgets.QTableWidgetItem(i[1]))
                    self.Link_Detail.setItem(1, 0, QtWidgets.QTableWidgetItem(i[2] + "KB"))
                    self.Link_Detail.setItem(2, 0, QtWidgets.QTableWidgetItem(i[3]))
                    self.Link_Detail.setItem(3, 0, QtWidgets.QTableWidgetItem(i[4]))
                    self.Link_Detail.setItem(4, 0, QtWidgets.QTableWidgetItem(i[5]))
                    self.Link_Detail.setItem(5, 0, QtWidgets.QTableWidgetItem(i[6]))
                    self.Link_Detail.setItem(6, 0, QtWidgets.QTableWidgetItem(i[7] + "KB"))
                    self.Link_Detail.setItem(7, 0, QtWidgets.QTableWidgetItem(i[8]))
                    self.Link_Detail.setItem(8, 0, QtWidgets.QTableWidgetItem(i[9]))
                    self.Link_Detail.setItem(9, 0, QtWidgets.QTableWidgetItem(i[10]))
                    self.Link_Detail.setItem(10, 0, QtWidgets.QTableWidgetItem(i[13]))
                    self.Link_Detail.setItem(11, 0, QtWidgets.QTableWidgetItem(i[11]))
                    self.Link_Detail.setItem(12, 0, QtWidgets.QTableWidgetItem(i[12]))
                    self.Link_Detail.setItem(13, 0, QtWidgets.QTableWidgetItem(i[14]))
                    self.Link_Detail.setItem(14, 0, QtWidgets.QTableWidgetItem(i[15]))
                    self.Link_Detail.setItem(15, 0, QtWidgets.QTableWidgetItem(i[16]))
                    self.tabWidget.setCurrentIndex(tapname_list.index(self.Link_Detail.objectName()))
        f.close()

    def AddNewTab(self, text):
        tab = QtWidgets.QWidget()
        self.tabWidget.addTab(tab, text)
        return tab

    def Search_AddNewTable(self, number, tab):
        Search_Details.Ui_Dialog.setupUi(self, number, tab, tapname_list)

    def Prefetch_AddNewTable(self, tab, tapname_list):
        Pre_Details.Ui_Dialog.setupUi(self, tab, tapname_list)

    def LinkFile_AddNewTable(self, tab):
        Link_Details.Ui_Dialog.setupUi(self, tab, tapname_list)

    def Shim_AddNewTable(self, tab):
        Shim_Details.Ui_Dialog.setupUi(self, tab, tapname_list)

    def Chrome_AddNewTable(self, tab):
        Chrome_Details.Ui_Dialog.setupUi(self, tab, tapname_list)

    def MousePress_Event(self, index):
        if index == 7:
            self.StartTime.setEnabled(True)
            self.EndTime.setEnabled(True)
            self.Category.setEnabled(True)
            self.SearchData.setEnabled(False)
        else:
            self.StartTime.setEnabled(False)
            self.EndTime.setEnabled(False)
            self.Category.setEnabled(False)
            self.SearchData.setEnabled(True)

    def SearchButton_Event(self, vbdata, enterdata, category, strtime, endtime):  # vbdata = Artifacts DropDownMenu Value / filename = Enter Data
        global sea
        a = []
        if vbdata == "Time_Search":
            for i in range(0, self.ListTable.rowCount()):
                file_name_item = self.ListTable.item(i, 0).text()
                ctime_item = self.ListTable.item(i, 1).text()
                mtime_item = self.ListTable.item(i, 2).text()
                rtime_item = self.ListTable.item(i, 3).text()
                type_item = self.ListTable.item(i, 4).text()
                untitled_item = self.ListTable.item(i, 5).text()
                if vbdata == "Time_Search":
                    if category == "Create_Time":
                        time_compare = ctime_item
                    elif "Modify" in category:
                        time_compare = mtime_item
                    else:
                        time_compare = rtime_item
                    if strtime <= time_compare:
                        if endtime >= time_compare:
                            a.append(file_name_item)
                            a.append(ctime_item)
                            a.append(mtime_item)
                            a.append(rtime_item)
                            a.append(type_item)
                            a.append(untitled_item)

            new_index = 0
            if (len(a) != 0):
                if (sea < 1):
                    tab = self.AddNewTab(self.SearchButton.text())
                    self.Search_AddNewTable(int(len(a) / 6), tab)
                    sea += 1
                    for i in range(0, int(len(a) / 6)):
                        for j in range(0, 6):
                            self.SearchListTable.setItem(i, j, QtWidgets.QTableWidgetItem(a[new_index]))
                            new_index += 1
                            if (new_index % 6 == 0):
                                continue
                    self.tabWidget.setCurrentIndex(tapname_list.index(self.SearchListTable.objectName()))
                else:
                    self.SearchListTable.setRowCount(int(len(a) / 6))
                    for i in range(0, int(len(a) / 6)):
                        for j in range(0, 6):
                            self.SearchListTable.setItem(i, j, QtWidgets.QTableWidgetItem(a[new_index]))
                            new_index += 1
                            if (new_index % 6 == 0):
                                continue
                    self.tabWidget.setCurrentIndex(tapname_list.index(self.SearchListTable.objectName()))
            else:
                root = Tk()
                root.withdraw()
                msg.showinfo("Error", "일치하는 항목이 존재하지 않습니다.")

        else:
            if enterdata == "":
                root = Tk()
                root.withdraw()
                msg.showinfo("Error", "검색어를 입력해주세요.")
            else:
                for i in range(0, self.ListTable.rowCount()):
                    file_name_item = self.ListTable.item(i, 0).text()
                    ctime_item = self.ListTable.item(i, 1).text()
                    mtime_item = self.ListTable.item(i, 2).text()
                    rtime_item = self.ListTable.item(i, 3).text()
                    type_item = self.ListTable.item(i, 4).text()
                    untitled_item = self.ListTable.item(i, 5).text()
                    if enterdata in file_name_item.lower():
                        if vbdata == type_item:  #
                            a.append(file_name_item)
                            a.append(ctime_item)
                            a.append(mtime_item)
                            a.append(rtime_item)
                            a.append(type_item)
                            a.append(untitled_item)
                        elif vbdata == "Artifacts":
                            a.append(file_name_item)
                            a.append(ctime_item)
                            a.append(mtime_item)
                            a.append(rtime_item)
                            a.append(type_item)
                            a.append(untitled_item)
            new_index = 0
            if (len(a) != 0):
                if (sea < 1):
                    tab = self.AddNewTab(self.SearchButton.text())
                    self.Search_AddNewTable(int(len(a) / 6), tab)
                    sea += 1
                    for i in range(0, int(len(a) / 6)):
                        for j in range(0, 6):
                            self.SearchListTable.setItem(i, j, QtWidgets.QTableWidgetItem(a[new_index]))
                            new_index += 1
                            if (new_index % 6 == 0):
                                continue
                    self.tabWidget.setCurrentIndex(tapname_list.index(self.SearchListTable.objectName()))
                else:
                    self.SearchListTable.setRowCount(int(len(a) / 6))
                    for i in range(0, int(len(a) / 6)):
                        for j in range(0, 6):
                            self.SearchListTable.setItem(i, j, QtWidgets.QTableWidgetItem(a[new_index]))
                            new_index += 1
                            if (new_index % 6 == 0):
                                continue
                    self.tabWidget.setCurrentIndex(tapname_list.index(self.SearchListTable.objectName()))
            else:
                root = Tk()
                root.withdraw()
                msg.showinfo("Error", "일치하는 항목이 존재하지 않습니다.")

    def Delete_Files_AddData(self):
        check2()
        row_count = len(realDeleted)
        self.Delete_Files.setRowCount(row_count)
        Delete_Files.Ui_Dialog.update(self)
        count = 0
        for i in realDeleted:
            self.Delete_Files.setItem(count, 0, QtWidgets.QTableWidgetItem(i[0]))
            self.Delete_Files.setItem(count, 1, QtWidgets.QTableWidgetItem(i[1]))
            self.Delete_Files.setItem(count, 2, QtWidgets.QTableWidgetItem(str(i[2].split(".")[0])))
            self.Delete_Files.setItem(count, 3, QtWidgets.QTableWidgetItem(str(i[3])))
            count += 1
        self.tabWidget.setCurrentIndex(tapname_list.index(self.Delete_Files.objectName()))

    def Frequently_AddData(self):
        total_result = Recently_function.Recently(self)
        Recently_function.setdata(self, total_result)
        Recently_Used.Ui_Dialog.rowCount(self, len(total_result))

        for i in range(0, len(total_result)):
            for j in range(0, 5):
                if (j % 4 == 0):
                    self.Recently_Detail.setItem(i, j, QtWidgets.QTableWidgetItem(str(total_result[i][j])))
                else:
                    self.Recently_Detail.setItem(i, j, QtWidgets.QTableWidgetItem(total_result[i][j]))

    def Continuous_AddData(self):
        rgb_r = random.randrange(128, 255)
        rgb_b = random.randrange(128, 255)
        rgb_g = random.randrange(128, 255)
        conti_pre_result = []
        conti_shi_result = []

        for i in range(0, self.ListTable.rowCount()):
            if self.ListTable.item(i, 4).text() == "Prefetch":
                conti_pre_result.append([self.ListTable.item(i, 0).text(), self.ListTable.item(i, 3).text(), Ui_Dialog.path + "\\" + self.ListTable.item(i, 0).text(), self.ListTable.item(i, 4).text()])
            elif self.ListTable.item(i, 4).text() == "AppCompatCache":
                conti_shi_result.append([self.ListTable.item(i, 0).text(), self.ListTable.item(i, 2).text(), self.ListTable.item(i, 5).text(), self.ListTable.item(i, 4).text()])

        conti_pre_result = Continuous_function.ck(self, conti_pre_result)
        conti_shi_result = Continuous_function.ck1(self, conti_shi_result)

        conti_result = conti_pre_result + conti_shi_result
        count = 0
        self.Continuous_Detail.setRowCount(len(conti_result))

        for i in conti_result:
            self.Continuous_Detail.setItem(count, 0, QtWidgets.QTableWidgetItem(i[0]))
            self.Continuous_Detail.setItem(count, 1, QtWidgets.QTableWidgetItem(i[2]))
            self.Continuous_Detail.setItem(count, 2, QtWidgets.QTableWidgetItem(str(i[1])))
            self.Continuous_Detail.setItem(count, 3, QtWidgets.QTableWidgetItem(str(i[3])))
            count += 1

        for i in range(0, len(conti_result)):
            date_time_i = datetime.strptime(conti_result[i][1], '%Y-%m-%d %H:%M:%S')
            if i != len(conti_result) - 1:
                date_time_j = datetime.strptime(conti_result[i + 1][1], '%Y-%m-%d %H:%M:%S')
                if (date_time_j - date_time_i).seconds < 60:
                    self.Continuous_Detail.item(i, 0).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 1).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 2).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 3).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                else:
                    date_time_i = datetime.strptime(conti_result[i - 1][1], '%Y-%m-%d %H:%M:%S')
                    date_time_j = datetime.strptime(conti_result[i][1], '%Y-%m-%d %H:%M:%S')
                    if (date_time_j - date_time_i).seconds < 60:
                        self.Continuous_Detail.item(i, 0).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                        self.Continuous_Detail.item(i, 1).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                        self.Continuous_Detail.item(i, 2).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                        self.Continuous_Detail.item(i, 3).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                        rgb_r = random.randrange(128, 255)
                        rgb_g = random.randrange(128, 255)
                        rgb_b = random.randrange(128, 255)
                    else:
                        rgb_r = random.randrange(128, 255)
                        rgb_g = random.randrange(128, 255)
                        rgb_b = random.randrange(128, 255)
                        self.Continuous_Detail.item(i + 1, 0).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                        self.Continuous_Detail.item(i + 1, 1).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                        self.Continuous_Detail.item(i + 1, 2).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                        self.Continuous_Detail.item(i + 1, 3).setBackground(QColor(rgb_r, rgb_g, rgb_b))
            else:
                date_time_j = datetime.strptime(conti_result[i - 1][1], '%Y-%m-%d %H:%M:%S')
                if (date_time_i - date_time_j).seconds < 60:
                    self.Continuous_Detail.item(i, 0).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 1).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 2).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 3).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                else:
                    rgb_r = random.randrange(128, 255)
                    rgb_g = random.randrange(128, 255)
                    rgb_b = random.randrange(128, 255)
                    self.Continuous_Detail.item(i, 0).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 1).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 2).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    self.Continuous_Detail.item(i, 3).setBackground(QColor(rgb_r, rgb_g, rgb_b))
                    break

    def DoubleClick_Event(self, objectName):
        global pre, chr, shi, lin

        if (objectName == "ListTable"):  # 메인
            sel_arti_row = self.ListTable.currentIndex().row()
            sel_arti_item = self.ListTable.item(sel_arti_row, 4).text()
        else:  # 검색결과
            sel_arti_row = self.SearchListTable.currentIndex().row()
            sel_arti_item = self.SearchListTable.item(sel_arti_row, 4).text()

        if sel_arti_item == "Prefetch":
            if (pre < 1):
                tab = self.AddNewTab(sel_arti_item)
                self.Prefetch_AddNewTable(tab, tapname_list)
                pre += 1
            else:
                Pre_Details.Ui_Dialog.update(self)

        elif sel_arti_item == "LinkFile":
            if (lin < 1):
                tab = self.AddNewTab(sel_arti_item)
                self.LinkFile_AddNewTable(tab)
                lin += 1
            else:
                Link_Details.Ui_Dialog.update(self)

        elif sel_arti_item == "AppCompatCache":
            if (shi < 1):
                tab = self.AddNewTab(sel_arti_item)
                self.Shim_AddNewTable(tab)
                shi += 1
            else:
                Shim_Details.Ui_Dialog.update(self)

        elif "Chrome" in sel_arti_item:
            if chr < 1:
                tab = self.AddNewTab("Chrome")
                self.Chrome_AddNewTable(tab)
                chr += 1
            else:
                Chrome_Details.Ui_Dialog.update(self)

        if (objectName == "ListTable"):
            row = self.ListTable.currentIndex().row()
            column = self.ListTable.currentIndex().column()
            if (self.ListTable.currentItem().column() >= 1):
                column = 0
                filename = self.ListTable.item(row, column).text()
            else:
                filename = self.ListTable.currentItem().text()

            if sel_arti_item == "Prefetch":
                self.prefetch_Detail(self.Dll_list_Detail.objectName(), filename)

            elif sel_arti_item == "LinkFile":
                column = 5
                filename = self.ListTable.item(row, column).text()
                self.LinkFile_Function(self.Link_Detail.objectName(), filename)

            elif sel_arti_item == "AppCompatCache":
                self.shimcacheWrite(0, self.Shim_Detail.objectName(), filename)

            elif "Chrome" in sel_arti_item:
                if sel_arti_item == "Chrome_cache":
                    column = 5
                    filename = self.ListTable.item(row, column).text()
                    self.chrome(self.Chrome_Detail.objectName(), filename, sel_arti_item)
                else:
                    self.chrome(self.Chrome_Detail.objectName(), filename, sel_arti_item)
        else:
            row = self.SearchListTable.currentIndex().row()
            column = self.SearchListTable.currentIndex().column()
            if self.SearchListTable.currentItem().column() >= 1:
                column = 0
                filename = self.SearchListTable.item(row, column).text()
            else:
                filename = self.SearchListTable.currentItem().text()

            if sel_arti_item == "Prefetch":
                self.prefetch_Detail(self.Dll_list_Detail.objectName(), filename)

            elif sel_arti_item == "LinkFile":
                column = 5
                filename = self.SearchListTable.item(row, column).text()
                self.LinkFile_Function(self.Link_Detail.objectName(), filename)

            elif sel_arti_item == "AppCompatCache":
                self.shimcacheWrite(0, self.Shim_Detail.objectName(), filename)

            elif "Chrome" in sel_arti_item:
                if sel_arti_item == "Chrome_cache":
                    column = 5
                    filename = self.SearchListTable.item(row, column).text()
                    self.chrome(self.Chrome_Detail.objectName(), filename, sel_arti_item)
                else:
                    self.chrome(self.Chrome_Detail.objectName(), filename, sel_arti_item)

    def Defile(self):
        global dex
        if (dex < 1):
            tab = self.AddNewTab("Deleted Files")
            Delete_Files.Ui_Dialog.setupUi(self, tab, tapname_list)
            self.Delete_Files_AddData()
            dex += 1
        else:
            self.Delete_Files_AddData()
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Delete_Files.objectName()))

    def Anti(self):
        global anx
        if (anx < 1):
            tab = self.AddNewTab("Anti-Forensic")
            Anti_Details.Ui_Dialog.setupUi(self, tab, tapname_list)
            anx += 1
            self.tabWidget.setCurrentIndex(tapname_list.index(self.AntiTable.objectName()))
        else:
            self.tabWidget.setCurrentIndex(tapname_list.index(self.AntiTable.objectName()))

    def Frequently(self):
        global rex
        if (rex < 1):
            tab = self.AddNewTab("Recently Used")
            Recently_Used.Ui_Dialog.setupUi(self, tab, tapname_list)
            self.Frequently_AddData()
            rex += 1
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Recently_Detail.objectName()))
        else:
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Recently_Detail.objectName()))

    def Mala(self):
        global alx
        if (alx < 1):
            tab = self.AddNewTab("Malware Check")
            Malware_Detail.Ui_Dialog.setupUi(self, tab, tapname_list)
            alx += 1
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Malware_Detail.objectName()))
        else:
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Malware_Detail.objectName()))

    def Conti(self):
        global cox
        if (cox < 1):
            tab = self.AddNewTab("Continous Files")
            Continuous_Detail.Ui_Dialog.setupUi(self, tab, tapname_list)
            self.Continuous_AddData()
            cox += 1
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Continuous_Detail.objectName()))
        else:
            self.tabWidget.setCurrentIndex(tapname_list.index(self.Continuous_Detail.objectName()))

    def Save_Data(self):
        filename_data = []
        ctime_data = []
        mtime_data = []
        rtime_data = []
        type_data = []
        if (len(self.ListTable.selectedItems())) >= 1:
            for i, item in enumerate(self.ListTable.selectedItems()):
                if i % 5 == 0:
                    filename_data.append(item.text())
                elif i % 5 == 1:
                    ctime_data.append(item.text())
                elif i % 5 == 2:
                    mtime_data.append(item.text())
                elif i % 5 == 3:
                    rtime_data.append(item.text())
                elif i % 5 == 4:
                    type_data.append(item.text())


        elif len(self.SearchListTable.selectedItems()) >= 1:
            for i, item in enumerate(self.SearchListTable.selectedItems()):
                if i % 5 == 0:
                    filename_data.append(item.text())
                elif i % 5 == 1:
                    ctime_data.append(item.text())
                elif i % 5 == 2:
                    mtime_data.append(item.text())
                elif i % 5 == 3:
                    rtime_data.append(item.text())
                elif i % 5 == 4:
                    type_data.append(item.text())

        data = pd.DataFrame(list(zip(filename_data, ctime_data, mtime_data, rtime_data, type_data)),
                            columns=["파일 이름", "생성 시간", "수정 시간", "실행 시간", "아티팩트명"])
        now = datetime.now()
        nowDatetime = now.strftime('%Y-%m-%d %H_%M_%S')
        data.to_csv(nowDatetime + "_Save.csv", index=False, encoding='cp949')

    def hello(self):
        print("hello")

    def close_handler(self, index):
        global sea, pre, chr, shi, lin, anx, alx, cox, rex, dex

        if tapname_list[index] == "Recently_Detail":
            rex = 0
        elif tapname_list[index] == "AntiTable":
            anx = 0
        elif tapname_list[index] == "Link_Detail":
            lin = 0
        elif tapname_list[index] == "Pre_Detail":
            pre = 0
        elif tapname_list[index] == "Chrome_Detail":
            chr = 0
        elif tapname_list[index] == "Shim_Detail":
            shi = 0
        elif tapname_list[index] == "Delete_Files":
            dex = 0
        elif tapname_list[index] == "Malware_Detail":
            alx = 0
        elif tapname_list[index] == "Continuous_Detail":
            cox = 0
        elif tapname_list[index] == "SearchListTable":
            sea = 0

        if index != 0:
            tapname_list.pop(index)
            self.tabWidget.removeTab(index)

    def Sbtn_Event(self, path):
        if path != "":
            (result, tresult) = Malware_function.Malware_Main(path)
            print(result)
            print(tresult)
            Malware_Detail.Ui_Dialog.Malware_AddData(self, result, tresult)
        else:
            root = Tk()
            root.withdraw()
            msg.showinfo("Error", "경로를 입력해주세요.")

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
